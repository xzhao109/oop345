///////////////////////////////////////////////////
// WorkShop#1  :  Part2
// Full Name  :  Xiaoyue Zhao
// Student ID :  124899212
// Email      :  xzhao109@myseneca.ca
// Section    :  ZEE
// Date       :  Sep 18
///////////////////////////////////////////////////


< /Part1 - 0%>
Explain in the reflection what is the effect of the keyword "constexpr"
constexpr int MAX_CARS = 100;

    “A constexpr variable can only be a compile-time constant.”

    The constexpr keyword ensures that MAX_CARS is a compile-time constant, 
    so that the value of the expression is known at compile time 
    and does not need to be calculated at run time, 
    allowing for better optimization of the program.

    The const keyword has a similar effect, but requires the compiler 
    to implicitly determine whether it is a compile-time constant or a run-time constant. 



< /Part2 - 100%>
Explain in the reflection why these functions (rule-of-3) are necessary 
and in what situation a class must implement them.

    "The copy constructor initializes new objects, 
    whereas the assignment operator replaces the contents of existing objects."

    > copy constructor
    In this program, the compiler does not call the copy constructor (copy elision).
    The end result is essentially identical to just doing a direct initialization.

    > assignment operator
    in >> currentCar;  ==> overload (operator>>)
    currentCar >> recordedCarsOnAds[allCars++];  // overload (operator>>)

    overload (std::istream& operator>>(std::istream& is, Cars& car)) first,
    then overload (void operator>>(const Cars& car1, Cars& car2)).

        void operator>>(const Cars& car1, Cars& car2) {
        car2 = car1;  ==> (operator=) be called
    }

    > destructor
    "the constructor is called when an object is created, 
    and the destructor is called when an object is destroyed."

    At the end of main(), currentCar/recordedCarsOnAds goes out of scope.
    This causes the ~Cars() destructor to be automatically called.

        Cars::~Cars() {
        delete[] m_brand;  // dynamically allocated object is explicitly deleted
                           // the object is destroyed
    }



< /Reflection >
the difference between internal and external linkage citing examples from your code
    internal linkage:
    constexpr int MAX_CARS = 100;

    external linkage:
    extern double g_taxrate;
    extern double g_discount;


what are static variables and how are they useful in your solution.
    "Using the keyword on a local variable changes its duration 
    from automatic duration to static duration."

    static int counter{1};
    The static keyword allows the counter to not be destroyed when it goes out of scope.


the changes that you made in upgrading your Cars class in part 2.

    char* m_brand{};  => change C-style form to hold any length
    m_brand = nullptr;

    setEmpty() => safe empty
    
    read() => increase the array length to avoid crash
    char brand[256]{};
    is.getline(brand, 256, ',')

    delete[] m_brand;
    m_brand = new char[strlen(brand) + 1];
    strcpy(m_brand, brand);